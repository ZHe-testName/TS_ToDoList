{"version":3,"sources":["serviceWorker.ts","bll/app-reducer/app-reducer.ts","api/todolists-api.tsx","utils/error-util.ts","bll/auth-reducer/auth-reducer.ts","bll/todolist-reducer/todolist-reducer.ts","bll/task-reducer/task-reducer.ts","components/ErrorSnackbar.tsx","components/AddItemInput.tsx","components/EditableSpan.tsx","components/Task.tsx","components/ToDoList.tsx","components/MainField.tsx","components/LoginForm.tsx","AppWithRedux.tsx","bll/state/store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionTypes","toDoListInstance","axios","create","withCredentials","baseURL","headers","todoListsAPI","get","then","res","data","title","post","id","delete","resultCode","put","config","tasksAPI","listId","items","taskId","newTask","authAPI","formFields","handleServerAppError","dispatch","messages","length","setErrorAC","value","setStatusAC","handleServerNetworkError","err","authSlice","createSlice","name","initialState","isAuth","reducers","setIsAuthAC","state","action","console","log","payload","authReducer","reducer","actions","appSlice","status","errorMessage","isInitialized","setAppInitializedAC","appReducer","todolistSlice","addTodoListAC","push","filter","entityStatus","removeTodoListAC","list","changeTodoListTitleAC","targetTask","find","task","todoListId","changeTodoListFilterAC","targetList","setTodoListsAC","lists","map","changeTodoListEntityStatusAC","toDoListReducer","taskSlice","addTaskAC","unshift","removeTaskAC","resultList","toDoListId","updateTaskAC","listCopy","model","setTasksAC","tasks","extraReducers","builder","addCase","forEach","taskReducer","updateTaskTC","getState","lockalModel","addedDate","deadline","priority","startDate","JSON","parse","catch","warn","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemInput","memo","addItem","disabled","useState","setTitle","error","setError","newTaskHandler","trim","Grid","container","TextField","label","style","marginRight","helperText","onChange","e","currentTarget","onChangeHandler","onKeyPress","key","onKeyPresHandler","Button","onClick","startIcon","color","size","EditableSpan","newValue","editMode","setEditMode","localTitle","onBlur","autoFocus","Box","onDoubleClick","Task","ListItem","area-label","className","Checkbox","indeterminate","checked","newStatus","changeTaskStatus","taskStatusChangeHandler","setNewTaskTitle","IconButton","marginLeft","removeTask","fontSize","ToDoList","demo","removeList","setFilter","addNewListHeader","addTask","filtersdTasks","useEffect","addTaskHandler","useCallback","addNewListHeaderhandler","onAllClickHandler","onActiveClickHandler","onCompleteClickHandler","t","direction","justify","marginBottom","Typography","List","component","MainField","toDoListArr","tasksObj","addToDoList","filterTasks","changeStatus","auth","item","xs","marginTop","spacing","filtredTasksArr","md","lg","Paper","padding","to","LoginForm","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","message","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","AppWithRedux","todolists","deleteTaskTC","createTaskTC","removeToDoListTC","addToDoListTC","changeTodoListTitleTC","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Container","fixed","exact","path","render","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dee0d140.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from \"redux\";\r\nimport { authAPI } from \"../../api/todolists-api\";\r\nimport { setIsAuthAC } from \"../auth-reducer/auth-reducer\";\r\n\r\nexport enum ActionTypes {\r\n    SET_STATUS = 'SET_STATUS',\r\n    SET_ERROR = 'SET_ERROR',\r\n    SET_APP_INITIALIZED = 'SET_APP_INITIALIZED', \r\n};\r\n\r\nexport type Status = 'idle' | 'loading' | 'successed' | 'failed' | null;\r\n\r\nexport type InitialStateType = {\r\n    //проходитт ли сейчас взаимодействие с сервером\r\n    status: Status,\r\n    //если произойдет ошибка то мы запишем ее текст сюда\r\n    errorMessage: string | null,\r\n    //инициализировано ли приложение(провепен пользователь, настройки получены)\r\n    isInitialized: boolean,\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle' as const,\r\n    errorMessage: null,\r\n    isInitialized: false,\r\n};\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setErrorAC (state, action: PayloadAction<{value: string | null}>){\r\n            state.errorMessage = action.payload.value;\r\n        },\r\n        setStatusAC (state, action: PayloadAction<{value: Status}>){\r\n            state.status = action.payload.value;\r\n        },\r\n        setAppInitializedAC (state, action: PayloadAction<{value: boolean}>){\r\n            state.isInitialized = action.payload.value;\r\n        },\r\n    },\r\n});\r\n\r\nexport const appReducer = appSlice.reducer;\r\n\r\nexport const{ \r\n                setAppInitializedAC,\r\n                setStatusAC,\r\n                setErrorAC,\r\n            } \r\n            = appSlice.actions;\r\n\r\nexport const isMeOnServerInitializedTC = () => {\r\n    return ((dispatch: Dispatch) => {\r\n        authAPI.isMeServerAuth()\r\n                .then(res => {\r\n                    if (!res.resultCode){\r\n                        dispatch(setIsAuthAC({value: true}));\r\n                    };\r\n\r\n                    dispatch(setAppInitializedAC({value: true}));\r\n                })\r\n    });\r\n};","import axios from \"axios\";\r\nimport { FilterValuesType } from \"../AppWithRedux\";\r\nimport { ServerLoginObjectType } from \"../bll/auth-reducer/auth-reducer\";\r\nimport { ServerTasksType } from \"../bll/task-reducer/task-reducer\";\r\n\r\nexport type ToDoListType = {\r\n    addedDate: string,\r\n    id: string,\r\n    order: number,\r\n    title: string,\r\n    filter: FilterValuesType,\r\n};\r\n\r\n// type TaskType = {\r\n//     addedDate: string,\r\n//     deadline: null | string,\r\n//     description: null | string,\r\n//     id: string,\r\n//     order: number,\r\n//     priority: number,\r\n//     startDate: null | string,\r\n//     status: number,\r\n//     title: string,\r\n//     todoListId: string,\r\n// };\r\n\r\nexport type TaskChangeType = {\r\n    addedDate: string,\r\n    deadline: null | string,\r\n    priority: number,\r\n    startDate: null | string,\r\n    status: number,\r\n    title: string,\r\n};\r\n\r\nexport type TaskResponceType = {\r\n    error: null | string,\r\n    items: Array<ServerTasksType>,\r\n    totalCount: number,\r\n};\r\n\r\nexport type ResponceToDoListType<D = {}> = {\r\n    data: D,\r\n    fieldsErrors: Array<any>,\r\n    messages: Array<string>,\r\n    resultCode: number,\r\n};\r\n\r\nexport type ResponceAuthType = {\r\n    resultCode: number,\r\n    messages: [] | string[],\r\n    data?: {\r\n        userId?: number,\r\n    },\r\n};\r\n\r\nexport type IsMeAuthServerResponceDataType = {\r\n    email: string,\r\n    id: number,\r\n    login: string,\r\n};\r\n\r\nconst toDoListInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    headers: {\r\n        \"API-KEY\": \"797677fc-71e8-47d3-89ee-972f9e368c32\",\r\n    },\r\n});\r\n\r\nexport const todoListsAPI = {\r\n    getToDoLists() {\r\n        return toDoListInstance.get<Array<ToDoListType>>('/todo-lists')\r\n                            .then(res => res.data);\r\n    },\r\n\r\n    createToDoList(title: string) {\r\n        return toDoListInstance.post<ResponceToDoListType<{item: ToDoListType}>>('/todo-lists', {title})\r\n                            .then(res => res.data);\r\n    },    \r\n\r\n    deleteToDoLIst(id: string) {\r\n        return toDoListInstance.delete<ResponceToDoListType>(`/todo-lists/${id}`)\r\n                            .then(res => res.data.resultCode);\r\n    },\r\n\r\n    updateToDoList(id: string, title: string) {\r\n        return toDoListInstance.put<ResponceToDoListType>(`/todo-lists/${id}`, {title})\r\n                            .then(res => res.config);\r\n    },\r\n};\r\n\r\nexport const tasksAPI = {\r\n    getTasks(listId: string) {\r\n        return toDoListInstance.get<TaskResponceType>(`/todo-lists/${listId}/tasks`)\r\n                    .then(res => res.data.items);\r\n    },\r\n\r\n    createTask(listId: string, title: string) {\r\n        return toDoListInstance.post<ResponceToDoListType<{item: ServerTasksType}>>(`/todo-lists/${listId}/tasks`, {title: title})\r\n                            .then(res => res.data);\r\n    },    \r\n\r\n    deleteTask(listId: string, taskId: string) {\r\n        return toDoListInstance.delete<ResponceToDoListType>(`/todo-lists/${listId}/tasks/${taskId}`)\r\n                            .then(res => res.data.resultCode);\r\n    },\r\n\r\n    updateTask(listId: string, taskId: string, newTask: TaskChangeType) {\r\n        return toDoListInstance.put<ResponceToDoListType>(`/todo-lists/${listId}/tasks/${taskId}`, newTask)\r\n                            .then(res => res.config.data);\r\n    },\r\n};\r\n\r\nexport const authAPI = {\r\n    login(formFields: ServerLoginObjectType) {\r\n        return toDoListInstance.post<ResponceToDoListType<{userId?: number}>>('/auth/login', formFields)\r\n                            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return toDoListInstance.delete<ResponceToDoListType<{userId?: number}>>('/auth/login')\r\n                            .then(res => res.data);\r\n    },\r\n    isMeServerAuth() {\r\n        return toDoListInstance.get<ResponceToDoListType<IsMeAuthServerResponceDataType>>('/auth/me')\r\n                            .then(res => res.data);\r\n    },\r\n};","import { Dispatch } from \"redux\";\r\nimport { ResponceToDoListType } from \"../api/todolists-api\";\r\nimport { setErrorAC, setStatusAC } from \"../bll/app-reducer/app-reducer\";\r\n\r\nexport const handleServerAppError = <D>(\r\n                                        data: ResponceToDoListType<D>, \r\n                                        dispatch: Dispatch\r\n                                        ) => {\r\n    if (data.resultCode && data.messages.length){\r\n        dispatch(setErrorAC({value: data.messages[0]}));\r\n    }\r\n\r\n    dispatch(setStatusAC({value: 'failed'}));\r\n};\r\n\r\nexport const handleServerNetworkError = (\r\n                                        err: string, \r\n                                        dispatch: Dispatch\r\n                                        ) => {\r\n    dispatch(setErrorAC({value: err ? err : 'Some error occurred.'}));\r\n\r\n    dispatch(setStatusAC({value: 'failed'}));\r\n};","import { handleServerAppError, handleServerNetworkError } from './../../utils/error-util';\r\nimport { setStatusAC } from './../app-reducer/app-reducer';\r\nimport { Dispatch } from 'redux';\r\n// import { SetAppErrorActionType, SetAppStatusActionType } from '../app-reducer/app-reducer';\r\nimport { authAPI } from '../../api/todolists-api';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport type AuthStateType = {\r\n    isAuth: boolean,\r\n};\r\n\r\nexport type ServerLoginObjectType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string,\r\n};\r\n\r\nconst initialState: AuthStateType = {\r\n    isAuth: false,\r\n};\r\n\r\n// export type ActionType = ReturnType<typeof setIsAuthAC>;\r\n\r\n// const SET_IS_AUTH = 'SET_IS_AUTH';\r\n\r\n//для того чтобы не писать в ручную всю типизацию, \r\n//и прочий бойлерплейт(шаблонный код)\r\n//в redux-toolkit есть функция createSlice которая берет на себя огоромный кусок рутинной работы\r\n//ее идея в том чобы создавать куски стейта на подобии того как их делили редюсеры\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',//имя на основании которого будут сздаватться все все названия и переменные\r\n\r\n    initialState: initialState,//стартовый стейт\r\n\r\n    reducers: {//тулкит сам будет отвечать за реадизацию редюсера\r\n        //но так как наш редюсер состоит из маленьких редюсеров\r\n        //то тут каждый нужно настроить\r\n\r\n        //каждый подредюсер передается в качестве метода объекта reducers\r\n        //с именем таким как его ждет внешний код\r\n        //каждый подредюсер принимает как и редюсер стейт и экшн\r\n        //вся типизация стейта и типы экшенов, экшнкриейторы\r\n        //все это берет на себя тулкит\r\n\r\n        //так же immerjs под капотом делает для нас копию стейта\r\n        //и благодаря этому мы можем свободно тут меня твсе как будто никакой имутабельности не существует\r\n\r\n        //нагрузку в екшене важно называть payload а не както иначе\r\n        setIsAuthAC (state, action: PayloadAction<{value: boolean}>){\r\n            console.log('set isAuth');\r\n            state.isAuth = action.payload.value;\r\n        }\r\n    },\r\n\r\n});\r\n\r\nconst authReducer = authSlice.reducer;// в одном из свойств обекта slice и будет хранится редюсер нашего куска стейта\r\n\r\n// const authReducer = (state: AuthStateType = initialState, action: ActionType): AuthStateType => {\r\n//     switch (action.type){\r\n//         case SET_IS_AUTH: {//эти значения будут генерится встроеной библиотекой immerjs\r\n//             return {//еще эта библиотека нужна для того чтобы работать с имутабельностю как с обичным значением\r\n//                 //то есть без лишних копий, в том числе и глубоких\r\n//                 //это типо удобно))\r\n//                 ...state,\r\n//                 isAuth: action.isAuth,\r\n//             };\r\n//         }\r\n\r\n//         default:\r\n//             return state;\r\n//     };\r\n// };\r\n\r\n// export const setIsAuthAC = (isAuth: boolean) => {\r\n//     return {type: SET_IS_AUTH, isAuth} as const;\r\n// };\r\n\r\n//экшкриейтор для санок можно достать из свойства слайса\r\nexport const {setIsAuthAC} = authSlice.actions;\r\n\r\n//ТУЛКИТ ПОМОГАЕТ ИЗБАВИТСЯ ОТ ОООЧЕНЬ БОЛЬШОГО КУСКА БОЙЛЕРПЛЕЙТ КОДА\r\nexport const sendAuthFormTC = (formFields: ServerLoginObjectType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({value: 'loading'}));\r\n\r\n        authAPI.login(formFields)\r\n                .then(res => {\r\n                    if (!res.resultCode){\r\n                        dispatch(setIsAuthAC({value: true}));\r\n\r\n                        dispatch(setStatusAC({value: 'successed'}));\r\n                    };\r\n\r\n                    handleServerAppError(res, dispatch);\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err.message, dispatch);\r\n                });\r\n    };\r\n};\r\n\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC({value: 'loading'}));\r\n\r\n        authAPI.logout()\r\n                .then(res => {\r\n                    if (!res.resultCode){\r\n                        dispatch(setIsAuthAC({value: false}));\r\n\r\n                        dispatch(setStatusAC({value: 'successed'}));\r\n                    };\r\n\r\n                    handleServerAppError(res, dispatch);\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err.message, dispatch);\r\n                });\r\n    };\r\n};\r\n\r\nexport default authReducer;","import { Status } from './../app-reducer/app-reducer';\r\nimport { todoListsAPI } from './../../api/todolists-api';\r\nimport { Dispatch } from 'redux';\r\nimport { FilterValuesType, ListsType, ServerListType } from './../../AppWithRedux';\r\nimport { setStatusAC } from '../app-reducer/app-reducer';\r\nimport { handleServerNetworkError } from '../../utils/error-util';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE_TODOLIST',\r\n    ADD_TODOLIST = 'ADD_TODOLIST',\r\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\r\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\r\n    SET_TODOLISTS = 'SET_TODOLISTS',\r\n    CHANGE_ENTITY_STATUS = 'CHANGE_ENTITY_STATUS';\r\n\r\n//В TS для экшнкриейторов можно создавать типы в ручную\r\n//а можно с помощю команды ReturnType создавать типы автоматически\r\n//на основании того обьекта что возвращает экшнкриейтор\r\n\r\n//это силно сокращает код и не нужно постоянно вносить изменения в типах\r\n\r\n// export type RemoveTodoListActionType = {\r\n//     type: 'REMOVE_TODOLIST',\r\n//     id: string,\r\n// };\r\n\r\n// export type AddTodoListActionType = {\r\n//     type: 'ADD_TODOLIST',\r\n//     title: string,\r\n//     id: string,\r\n// };\r\n\r\n// export type ChangeTodoListTitleActionType = {\r\n//     type: 'CHANGE_TODOLIST_TITLE',\r\n//     id: string,\r\n//     title: string,\r\n// };\r\n\r\n// export type ChangeTodoListFilterActionType = {\r\n//     type: 'CHANGE_TODOLIST_FILTER',\r\n//     id: string,\r\n//     filter: FilterValuesType\r\n// };\r\n\r\n// export type SetTodoListsActionType = {\r\n//     type: 'SET_TODOLISTS',\r\n//     lists: Array<ListsType>,\r\n// };\r\n\r\n// export type AddTodoListActionType = ReturnType<typeof addTodoListAC>;\r\n// export type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC> ;\r\n// export type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>;\r\n\r\n// type ActionType = \r\n//                 ReturnType<typeof addTodoListAC> \r\n//                 | ReturnType<typeof removeTodoListAC> \r\n//                 | ReturnType<typeof changeTodoListTitleAC>  \r\n//                 | ReturnType<typeof changeTodoListFilterAC> \r\n//                 | ReturnType<typeof setTodoListsAC>\r\n//                 | ReturnType<typeof changeTodoListEntityStatusAC>;;\r\n\r\nconst initialState: Array<ListsType> = []; \r\n\r\nconst todolistSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addTodoListAC (state, action: PayloadAction<{value: ServerListType}>){\r\n            state.push({...action.payload.value, filter: 'all', entityStatus: 'idle',});\r\n        },\r\n\r\n        removeTodoListAC (state, action: PayloadAction<{value: string}>){\r\n            return state.filter(list => list.id !== action.payload.value); \r\n        },\r\n\r\n        changeTodoListTitleAC (state, action: PayloadAction<{todoListId: string, title: string}>){\r\n            const targetTask = state.find(task => task.id === action.payload.todoListId);\r\n    \r\n            if (targetTask){\r\n                targetTask.title = action.payload.title;\r\n            };\r\n        },\r\n\r\n        changeTodoListFilterAC (state, action: PayloadAction<{todoListId: string, filter: FilterValuesType}>){\r\n            const targetList = state.find(list => list.id === action.payload.todoListId);\r\n            \r\n            if (targetList){\r\n                targetList.filter = action.payload.filter;\r\n            };\r\n        },\r\n\r\n        setTodoListsAC (state, action: PayloadAction<{lists: Array<ServerListType>}>){\r\n            console.log('set todo list');\r\n            return action.payload.lists.map((list: ServerListType) => ({...list, filter: 'all', entityStatus: 'idle',}));\r\n        },\r\n\r\n        changeTodoListEntityStatusAC (state, action: PayloadAction<{id: string, status: Status}>){\r\n            const targetTask = state.find(task => task.id === action.payload.id);\r\n    \r\n            if (targetTask){\r\n                targetTask.entityStatus = action.payload.status;\r\n            };\r\n        },\r\n    },\r\n});\r\n\r\nexport const toDoListReducer = todolistSlice.reducer;\r\n\r\nexport const {\r\n    setTodoListsAC,\r\n    addTodoListAC,\r\n    changeTodoListEntityStatusAC,\r\n    removeTodoListAC,\r\n    changeTodoListTitleAC,\r\n    changeTodoListFilterAC,\r\n    } = todolistSlice.actions;\r\n\r\n//thunks cretors\r\n//в данном случае создание санкриейтора избыточно\r\n//санкриейторы используются для создания замыканий\r\n//на случай если а санку нужно будет передать какието данные\r\nexport const fetchToDoListThunkTC = () => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            dispatch(setStatusAC({value: 'loading'}));\r\n\r\n            todoListsAPI.getToDoLists()\r\n                    .then(data => {\r\n                        dispatch(setTodoListsAC({lists: data}));\r\n\r\n                        dispatch(setStatusAC({value: 'successed'}));\r\n                    })\r\n                    .catch(err => {\r\n                        handleServerNetworkError(err.message, dispatch);\r\n                    });;\r\n        }\r\n    );\r\n};\r\n\r\nexport const addToDoListTC = (title: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            dispatch(setStatusAC({value: 'loading'}));\r\n\r\n            todoListsAPI.createToDoList(title)\r\n                .then(res => {\r\n                    dispatch(addTodoListAC({value: res.data.item}));\r\n\r\n                    dispatch(setStatusAC({value: 'successed'}));\r\n                });\r\n        }\r\n    );\r\n};\r\n\r\nexport const removeToDoListTC = (listId: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            dispatch(setStatusAC({value: 'loading'}));\r\n            dispatch(changeTodoListEntityStatusAC({id: listId, status: 'loading'}));\r\n\r\n            todoListsAPI.deleteToDoLIst(listId)\r\n                .then(resultCode => {\r\n                    if (!resultCode){\r\n                        dispatch(removeTodoListAC({value: listId}));\r\n\r\n                        dispatch(setStatusAC({value: 'successed'}));\r\n                    }\r\n                });\r\n        }\r\n    );\r\n};\r\n\r\nexport const changeTodoListTitleTC = (listId: string, title: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            todoListsAPI.updateToDoList(listId, title)\r\n                .then((data) => {\r\n                    dispatch(changeTodoListTitleAC({todoListId: listId, title: JSON.parse(data.data).title}));\r\n                });\r\n        }\r\n    );\r\n};\r\n","import { tasksAPI, TaskChangeType } from './../../api/todolists-api';\r\nimport { ServerListType, TasksObjPropsType } from './../../AppWithRedux';\r\n// import { SetTodoListsActionType, AddTodoListActionType, RemoveTodoListActionType, addTodoListAC } from './../todolist-reducer/todolist-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { AppRootStateType } from '../state/store';\r\nimport { setStatusAC } from '../app-reducer/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-util';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { addTodoListAC, removeTodoListAC, setTodoListsAC } from '../todolist-reducer/todolist-reducer';\r\n\r\nexport const ADD_TASK = 'ADD_TASK',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    CHANGE_STATUS = 'CHANGE_STATUS',\r\n    CHANGE_TASK_DESCRIPTION = 'CHANGE_TASK_DESCRIPTION',\r\n    ADD_TODOLIST = 'ADD_TODOLIST',\r\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\r\n    SET_TODOLISTS = 'SET_TODOLISTS',\r\n    SET_TASKS = 'SET_TASKS',\r\n    UPDATE_TASK = 'UPDATE_TASK'; \r\n\r\nexport type ServerTasksType = {\r\n    description: string | null,\r\n    title: string,\r\n    status: number,\r\n    priority: number,\r\n    startDate: string | null,\r\n    deadline: string | null,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string,\r\n};\r\n\r\n// export type AddTaskActionType = ReturnType<typeof addTaskAC>;\r\n\r\n// export type RemoveTaskActionType = ReturnType<typeof removeTaskAC>;\r\n\r\n// export type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>;\r\n\r\n// export type ChangeTaskDescriptionActionType = ReturnType<typeof changeTaskDescriptionAC>;\r\n\r\n// | ReturnType<typeof changeTaskStatusAC>\r\n// | ReturnType<typeof changeTaskDescriptionAC>\r\n\r\n// export type ActionType = \r\n//                 ReturnType<typeof addTaskAC>\r\n//                 | ReturnType<typeof removeTaskAC>\r\n//                 | ReturnType<typeof updateTaskAC>\r\n//                 | ReturnType<typeof setTasksAC>\r\n                // | RemoveTodoListActionType\r\n                // | SetTodoListsActionType\r\n                // | AddTodoListActionType;\r\n\r\nconst initialState: TasksObjPropsType = {}; \r\n\r\nconst taskSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addTaskAC (state, action: PayloadAction<{task: ServerTasksType}>){\r\n            const newTask = {\r\n                ...action.payload.task\r\n                // isDone: !!action.payload.task.status,\r\n            };\r\n\r\n            state[action.payload.task.todoListId].unshift(newTask);\r\n        },\r\n        \r\n        removeTaskAC (state, action: PayloadAction<{toDoListId: string, taskId: string}>){\r\n            const resultList = state[action.payload.toDoListId].filter(task => task.id !== action.payload.taskId);\r\n\r\n            state[action.payload.toDoListId] = resultList;\r\n        },\r\n        \r\n        updateTaskAC (state, action: PayloadAction<{toDoListId: string, taskId: string, model: TaskChangeType}>){\r\n            const listCopy = state[action.payload.toDoListId]\r\n                                                        .map(task => task.id === action.payload.taskId\r\n                                                                ? {...task, ...action.payload.model}\r\n                                                                : task);\r\n\r\n            state[action.payload.toDoListId] = listCopy;\r\n        },\r\n           \r\n        setTasksAC (state, action: PayloadAction<{toDoListId: string, tasks: Array<ServerTasksType>}>){\r\n            console.log('set task');\r\n            state[action.payload.toDoListId] = action.payload.tasks;\r\n        },\r\n    },\r\n\r\n    //здесь мы подписываемся на редюсеры которые не созданы в даном слайсе\r\n    //чтобы позаимствовать типизацию у оригинальных редюсеров\r\n    //в место объекта передать функцию\r\n\r\n    //она принимает объект bulder и обрабатывая его методы мы можем не типизировать экшн\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.value.id] = [];\r\n        });\r\n\r\n        builder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.value];\r\n        });\r\n\r\n        builder.addCase(setTodoListsAC, (state, action) => {\r\n            console.log('task set todo list');\r\n            action.payload.lists.forEach(list => {\r\n                state[list.id] = [];\r\n            });\r\n        });\r\n    },\r\n\r\n        // [addTodoListAC.type]: (state, action: PayloadAction<{value: ServerListType}>) =>{\r\n        //     state[action.payload.value.id] = [];\r\n        // },\r\n\r\n        // [removeTodoListAC.type]: (state, action: PayloadAction<{value: string}>) => {\r\n        //     delete state[action.payload.value];\r\n        // },\r\n\r\n        // [setTodoListsAC.type]: (state, action: PayloadAction<{lists: Array<ServerListType>}>) => {\r\n        //     console.log(action.payload.lists);\r\n        //     action.payload.lists.forEach(list => {\r\n        //         state[list.id] = [];\r\n        //     });\r\n        // },\r\n});\r\n\r\nexport const taskReducer = taskSlice.reducer;\r\n\r\nexport const {\r\n    setTasksAC,\r\n    removeTaskAC,\r\n    addTaskAC,\r\n    updateTaskAC,\r\n} = taskSlice.actions;\r\n\r\n// export const taskReducer = (state: TasksObjPropsType = initialState, action: ActionType):TasksObjPropsType => {\r\n//     switch (action.type){\r\n//         case ADD_TASK: {\r\n//             const newTask = {\r\n//                 ...action.task,\r\n//                 isDone: !!action.task.status,\r\n//             };\r\n\r\n//             const newList = [...state[action.task.todoListId]];\r\n\r\n//             newList.unshift(newTask);\r\n\r\n//             return (\r\n//                 {\r\n//                     ...state,\r\n//                     [action.task.todoListId]: newList,\r\n//                 }\r\n//             );\r\n//         }\r\n\r\n//         case REMOVE_TASK: {\r\n//             const targetList = state[action.toDoListId];\r\n\r\n//             const resultList = targetList.filter(task => task.id !== action.taskId);\r\n\r\n//             return (\r\n//                 {\r\n//                     ...state,\r\n//                     [action.toDoListId]: resultList,\r\n//                 }\r\n//             );\r\n//         }\r\n\r\n//         case UPDATE_TASK: { \r\n//             const listCopy = [...state[action.toDoListId]]\r\n//                                                         .map(task => task.id === action.taskId\r\n//                                                                 ? {...task, ...action.model}\r\n//                                                                 : task);\r\n\r\n//             return (\r\n//                 {\r\n//                     ...state,\r\n//                     [action.toDoListId]: listCopy,\r\n//                 }\r\n//             );\r\n//         }\r\n\r\n//         case ADD_TODOLIST: {\r\n//             return (\r\n//                 {\r\n//                     ...state,\r\n//                     [action.list.id]: [],\r\n//                 }\r\n//             );\r\n//         }\r\n\r\n//         case REMOVE_TODOLIST: {\r\n//             const newState = {...state};\r\n\r\n//             delete newState[action.id];\r\n\r\n//             return newState;\r\n//         }\r\n\r\n//         case SET_TODOLISTS: {\r\n//             const copyState = {...state};\r\n\r\n//             action.lists.forEach(list => {\r\n//                 copyState[list.id] = [];\r\n//             });\r\n\r\n//             return copyState;\r\n//         }\r\n        \r\n//         case SET_TASKS: {\r\n//             return {...state, [action.toDoListId]: action.tasks}\r\n//         }\r\n\r\n//         default:\r\n//             return state;\r\n//     };\r\n// };\r\n\r\n// export const addTaskAC = (task: ServerTasksType) => {\r\n//     return {type: ADD_TASK, task} as const;\r\n// };\r\n\r\n// export const removeTaskAC = (toDoListId: string, taskId: string) => {\r\n//     return {type: REMOVE_TASK, toDoListId, taskId} as const;\r\n// };\r\n\r\n// export const updateTaskAC = (toDoListId: string, taskId: string, model: TaskChangeType) => {\r\n//     return {type: UPDATE_TASK, toDoListId, taskId, model} as const;\r\n// };\r\n\r\n// // export const changeTaskStatusAC = (toDoListId: string, taskId: string, status: number) => {\r\n// //     return {type: CHANGE_STATUS, toDoListId, taskId, status} as const;\r\n// // };\r\n   \r\n// export const setTasksAC = (toDoListId: string, tasks: Array<ServerTasksType>) => {\r\n//     return {type: SET_TASKS, toDoListId, tasks} as const;\r\n// };\r\n        \r\n// export const changeTaskDescriptionAC = (toDoListId: string, taskId: string, newDescription: string) => {\r\n//     return {type: CHANGE_TASK_DESCRIPTION, toDoListId, taskId, newDescription} as const;\r\n// };\r\n\r\n///////////////////////thunk creators\r\n\r\nexport const fetchTasksTC = (listId: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            dispatch(setStatusAC({value: 'loading'}));\r\n\r\n            tasksAPI.getTasks(listId)\r\n                .then(tasks => dispatch(setTasksAC({toDoListId: listId, tasks: tasks})))\r\n                .then(() => dispatch(setStatusAC({value: 'successed'})));\r\n        }\r\n    );\r\n};\r\n\r\nexport const createTaskTC = (listId: string, title: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            dispatch(setStatusAC({value: 'loading'}));\r\n\r\n            tasksAPI.createTask(listId, title)\r\n                .then(data => {\r\n                    if (!data.resultCode){\r\n                        dispatch(addTaskAC({task: data.data.item}));\r\n                    }\r\n\r\n                    handleServerAppError(data, dispatch);\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err.message, dispatch);\r\n                });\r\n        }\r\n    );\r\n};\r\n\r\nexport const deleteTaskTC = (listId: string, taskId: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            tasksAPI.deleteTask(listId, taskId)\r\n                .then(resultCode => {\r\n                    if (!resultCode){\r\n                        dispatch(removeTaskAC({toDoListId: listId, taskId: taskId}));\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    );\r\n};\r\n\r\nexport type ThunkModelType = {\r\n    addedDate?: string,\r\n    deadline?: string | null,\r\n    priority?: number,\r\n    startDate?: string | null,\r\n    status?: number,\r\n    title?: string,\r\n};\r\n\r\nexport const updateTaskTC = (listId: string, taskId: string, model: ThunkModelType) => {\r\n    return (\r\n        (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n            const state = getState();\r\n\r\n            const task = state.tasks[listId].find(task => task.id === taskId);\r\n\r\n            if (!task){\r\n                console.warn('no such task or todolist!!!');\r\n\r\n                return;\r\n            }\r\n\r\n            const lockalModel = {\r\n                addedDate: task.addedDate,\r\n                deadline: task.deadline,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                title: task.title,\r\n                ...model\r\n            };\r\n\r\n            dispatch(setStatusAC({value: 'loading'}));\r\n\r\n            tasksAPI.updateTask(listId, taskId, lockalModel)\r\n                .then(data => {\r\n                    dispatch(updateTaskAC({toDoListId: listId, taskId: taskId, model: JSON.parse(data)}));\r\n\r\n                    dispatch(setStatusAC({value: 'successed'}));\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    );\r\n};","import * as React from 'react';\r\n// import Stack from '@mui/material/Stack';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../bll/state/store';\r\nimport { setErrorAC } from '../bll/app-reducer/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n  const errorMessage = useSelector<AppRootStateType, string | null>(state => state.app.errorMessage);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    dispatch(setErrorAC({value: null}));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar open={!!errorMessage} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" >\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, Grid} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PlusOneIcon from '@material-ui/icons/PlusOne';\r\n\r\ntype PropsType = {\r\n    addItem: (toDoListId: string) => void,\r\n    disabled?: boolean,\r\n};\r\n\r\n//Сейчас в нашем приложении есть проблема\r\n//при лбых изменениях в стейте глобальном реакт запрашивает для сравнения и перерисовки\r\n//jsx у всех компонент\r\n\r\n//Если преложение будет большим то при сравнении слишком большого количества данных с виртуал дом\r\n//реакт будет сильно перегружаться и излишними вычеслениями и загружать прой и расходовать батарею\r\n\r\n//Нужна оптимизация\r\n\r\n//чтобы при одних и тех же пропсах не дергать компонеты вообще\r\n//и не грузить лишним ядро реакта и вызывать сравнения и перерисовки только в нужных местах\r\n\r\n//Тут на помощ приходит HOC React.memo()\r\n//HOC - ето такие хай ордер компонентс(компонеты высшего порядка), это функции которые \r\n//принимают функциональную компоненту и возврващают ее обернутой в контейнерную.\r\n//React.memo() = HOC которая проверяет входные пропсы и в случае отсутствия изменений не запрашивает jsx для сравнений\r\n//и сответственно не грузит вычислениями проц\r\n\r\n//она принимает нужнаю компоненту\r\n\r\nconst AddItemInput = React.memo((props: PropsType) => {\r\n    const {addItem, disabled = false} = props;\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const newTaskHandler = () => {\r\n        if (title.trim() !== ''){\r\n            addItem(title);\r\n\r\n            setTitle(\"\");\r\n            return;\r\n        };\r\n\r\n        setError('Tittle is required!');\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => setTitle(e.currentTarget.value);\r\n    \r\n    const onKeyPresHandler = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (error !== null){\r\n            setError(null);\r\n        };\r\n\r\n        if (e.key === 'Enter'){\r\n            newTaskHandler();\r\n        };\r\n    }\r\n\r\n    return (\r\n            <Grid\r\n                container>\r\n                    <TextField \r\n                            disabled={disabled}\r\n                            variant='outlined'\r\n                            label='Typing there'\r\n                            style={{marginRight: '20px'}} \r\n                            error={!!error}\r\n                            value={title}\r\n                            helperText={error}\r\n                            onChange={e => onChangeHandler(e)}\r\n                            onKeyPress={e => onKeyPresHandler(e)}/>\r\n\r\n                            <Button \r\n                                disabled={disabled}\r\n                                onClick={newTaskHandler}\r\n                                variant='contained'\r\n                                startIcon={<PlusOneIcon/>}\r\n                                color='primary'\r\n                                size='small'></Button>\r\n            </Grid>\r\n    );\r\n});\r\n\r\nexport default AddItemInput;","import React, {useState, ChangeEvent} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Box } from '@material-ui/core';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string,\r\n    newValue: (newValue: string) => void, \r\n};\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const {title, newValue} = props;\r\n\r\n    \r\n    const [editMode, setEditMode] = useState(false);\r\n    const [localTitle, setTitle] = useState('');\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n\r\n        setTitle(title);\r\n    };\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n\r\n        newValue(localTitle);\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ? <TextField \r\n                            value={localTitle}\r\n                            onBlur={activateViewMode}\r\n                            onChange={onChangeHandler}\r\n                            autoFocus/>\r\n\r\n                        : <Box\r\n                                onDoubleClick={activateEditMode}>{title}</Box>\r\n            }\r\n        </>\r\n    );\r\n});\r\n\r\nexport default EditableSpan;","import { Checkbox, IconButton, ListItem } from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ChangeEvent } from \"react-transition-group/node_modules/@types/react\";\r\nimport { Status } from \"../bll/app-reducer/app-reducer\";\r\nimport { AppRootStateType } from \"../bll/state/store\";\r\nimport { ServerTasksType } from \"../bll/task-reducer/task-reducer\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\nexport type TasksPropsType = {\r\n    toDoListId: string,\r\n    task: ServerTasksType,\r\n    removeTask: (id: string, listId: string) => void,\r\n    changeTaskStatus: (id: string, status: number, listId: string) => void,\r\n    setNewTaskTitle: (newValue: string, taskId: string, listId: string) => void,\r\n};\r\n\r\nexport const Task = React.memo((props: TasksPropsType) => {\r\n    const status = useSelector<AppRootStateType, Status>(state => state.app.status);\r\n \r\n    const taskStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newStatus = e.currentTarget.checked;\r\n\r\n        props.changeTaskStatus(props.task.id, +newStatus, props.toDoListId);\r\n    };\r\n\r\n    const onChangeTitleHandler = (newValue: string) => {\r\n        props.setNewTaskTitle(newValue, props.task.id, props.toDoListId);\r\n    };\r\n    \r\n    return (\r\n            <ListItem\r\n                area-label='todo list item'\r\n                key={`${props.task.id}`}\r\n                className={!!props.task.status ? 'done-task' : 'uncomplete-task'}>\r\n                    <Checkbox  \r\n                            indeterminate\r\n                            checked={!!props.task.status} \r\n                            onChange={e => taskStatusChangeHandler(e)}/>\r\n\r\n                    <EditableSpan \r\n                                title={props.task.title}\r\n                                newValue={onChangeTitleHandler}/>\r\n\r\n                    <IconButton\r\n                            style={{marginLeft: 'auto'}}\r\n                            onClick={() => props.removeTask(props.task.id, props.toDoListId)}\r\n                            area-label='delete'>\r\n                                <DeleteIcon \r\n                                            fontSize='small'/>\r\n                    </IconButton>\r\n            </ListItem>\r\n        );\r\n});","import React, { useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport { FilterValuesType } from '../AppWithRedux';\r\nimport AdditemInput from './AddItemInput';\r\nimport EditableSpan from './EditableSpan';\r\nimport { Grid, List } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useCallback } from 'react';\r\nimport { Task } from './Task';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchTasksTC, ServerTasksType } from '../bll/task-reducer/task-reducer';\r\nimport { Status } from '../bll/app-reducer/app-reducer';\r\n\r\n// type TaskType = {\r\n//     id: string,\r\n//     title: string,\r\n//     isDone: boolean,\r\n// };\r\n\r\ntype PropsType = {\r\n    title: string,\r\n    tasks: Array<ServerTasksType>,\r\n    filter: string,\r\n    id: string,\r\n    demo?: boolean,\r\n    entityStatus: Status,\r\n    removeTask: (id: string, listId: string) => void,\r\n    changeTaskStatus: (id: string, status: number, listId: string) => void,\r\n    setNewTaskTitle: (newValue: string, taskId: string, listId: string) => void,\r\n    setFilter: (value: FilterValuesType, id: string) => void,\r\n    addTask: (taskDesc: string, listId: string) => void,\r\n    removeList: (listId: string) => void,\r\n    addNewListHeader: (newValue: string, listId: string) => void,\r\n};\r\n\r\nexport const ToDoList = React.memo((props: PropsType) => {\r\n    const { \r\n            title, \r\n            tasks, \r\n            filter, \r\n            id, \r\n            entityStatus,\r\n            //это поле создается толео для деморежима\r\n            //чтобы изолировать сторибук от сервера\r\n            demo = false,\r\n            removeTask, \r\n            removeList, \r\n            setFilter, \r\n            changeTaskStatus, \r\n            setNewTaskTitle, \r\n            addNewListHeader,\r\n            addTask\r\n                            } = props;\r\n\r\n    let filtersdTasks: Array<ServerTasksType> = tasks;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(demo){\r\n            return;\r\n        }\r\n        \r\n        dispatch(fetchTasksTC(id));\r\n    }, []);\r\n\r\n    const removeListHandler = () => {\r\n        removeList(id);\r\n    };\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, id);\r\n    }, [addTask, id]);\r\n\r\n    const addNewListHeaderhandler = useCallback((newValue: string) => {\r\n        addNewListHeader(newValue, id);\r\n    }, [addNewListHeader, id]);\r\n\r\n    const onAllClickHandler = useCallback(() => (setFilter('all', id)), [setFilter, id]);\r\n    const onActiveClickHandler = useCallback(() => (setFilter('active', id)), [setFilter, id]);\r\n    const onCompleteClickHandler = useCallback(() => (setFilter('completed', id)), [setFilter, id]);\r\n\r\n    if (filter === 'active'){\r\n        filtersdTasks = tasks.filter(t => !t.status); \r\n    };\r\n\r\n    if (filter === 'completed'){\r\n        filtersdTasks = tasks.filter(t => !!t.status);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Grid\r\n                container\r\n                direction='row'\r\n                justify='space-between'\r\n                style={{marginBottom: '15px'}}>\r\n                    <Typography\r\n                            variant='h4'>\r\n                        <EditableSpan \r\n                                    title={title}\r\n                                    newValue={addNewListHeaderhandler}/>\r\n                    </Typography>\r\n\r\n                    <Button  \r\n                        disabled={entityStatus === 'loading'}\r\n                        color='secondary'\r\n                        size='small'\r\n                        startIcon={<DeleteIcon />}  \r\n                        onClick={removeListHandler}>Delete</Button>\r\n            </Grid>\r\n\r\n            <AdditemInput addItem={addTaskHandler} disabled={entityStatus === 'loading'}/>\r\n\r\n            <List\r\n                component='nav'\r\n                area-label='todo list'>\r\n                    {\r\n                        filtersdTasks.map(task => {\r\n                                            return <Task\r\n                                                        key={task.id}\r\n                                                        toDoListId={id}\r\n                                                        task={task}\r\n                                                        removeTask={removeTask}\r\n                                                        changeTaskStatus={changeTaskStatus}\r\n                                                        setNewTaskTitle={setNewTaskTitle} />\r\n                        })\r\n                    }\r\n            </List>\r\n            <Grid\r\n                container\r\n                direction='row'\r\n                justify='space-around'>\r\n                    <Button \r\n                        color='default'\r\n                        variant={filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All</Button>\r\n                    <Button \r\n                        color='primary'\r\n                        variant={filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n                    <Button \r\n                        color='secondary'\r\n                        variant={filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompleteClickHandler}>Completed</Button>\r\n            </Grid>\r\n        </div>\r\n    );\r\n});","import { Grid, Paper } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ListsType, MainFieldPropsType } from '../AppWithRedux';\r\nimport { AppRootStateType } from '../bll/state/store';\r\nimport AddItemInput from './AddItemInput';\r\nimport { ToDoList } from './ToDoList';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst MainField = (props: MainFieldPropsType) => {\r\n    const {\r\n            toDoListArr, \r\n            tasksObj, \r\n            demo,\r\n            addToDoList, \r\n            addTask, \r\n            removeTask, \r\n            filterTasks, \r\n            changeStatus, \r\n            removeList,\r\n            setNewTaskTitle,\r\n            addNewListHeader,} = props;\r\n\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth);\r\n\r\n    if (!isAuth){\r\n        return <Redirect to={'/login'}/>\r\n    };\r\n        \r\n    return (\r\n        <>\r\n            <Grid \r\n                container\r\n                item\r\n                xs={12}\r\n                style={{marginTop: '15px'}}>\r\n                    \r\n                    <AddItemInput addItem={addToDoList}/>\r\n                \r\n            </Grid>\r\n\r\n                    <Grid \r\n                        container\r\n                        item\r\n                        xs={12}\r\n                        spacing={8}\r\n                        style={{marginTop: '15px'}}>                    \r\n                            {toDoListArr.map((list: ListsType) => {\r\n                                let filtredTasksArr = tasksObj[list.id];\r\n                                \r\n                                return(\r\n                                    <Grid\r\n                                        item\r\n                                        xs={12}\r\n                                        md={6}\r\n                                        lg={4}\r\n                                        key={list.id}>\r\n                                            <Paper\r\n                                                className='list'\r\n                                                style={{padding: '15px'}}\r\n                                                elevation={2}>\r\n                                                    <ToDoList \r\n                                                        entityStatus={list.entityStatus}\r\n                                                        demo={demo}\r\n                                                        id={list.id}\r\n                                                        title={list.title}\r\n                                                        filter={list.filter}\r\n                                                        tasks={filtredTasksArr}\r\n                                                        removeTask={removeTask}\r\n                                                        setFilter={filterTasks}\r\n                                                        addTask={addTask}\r\n                                                        changeTaskStatus={changeStatus}\r\n                                                        removeList={removeList}\r\n                                                        setNewTaskTitle={setNewTaskTitle}\r\n                                                        addNewListHeader={addNewListHeader}\r\n                                                        />\r\n                                            </Paper>\r\n                                </Grid>);    \r\n                            })}\r\n                        </Grid>  \r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainField;","import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { sendAuthFormTC } from '../bll/auth-reducer/auth-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../bll/state/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginForm = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n          email: '',\r\n          password: '',\r\n          rememberMe: false,\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(sendAuthFormTC(values));\r\n        },\r\n      });\r\n\r\n    if (isAuth){\r\n        return <Redirect to={'/'}/>;\r\n    };\r\n\r\n    return (\r\n        <Grid container justify='center'>\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            For using this app pleace login\r\n                            or use free account\r\n\r\n                            <br />\r\n                            <br />\r\n\r\n                            Email: free@samuraijs.com\r\n\r\n                            <br />\r\n                            <br />\r\n\r\n                            Password: free\r\n                        </FormLabel>\r\n\r\n                        <FormGroup>\r\n                            <TextField \r\n                                label='Email'\r\n                                margin='normal'\r\n                                // деструктурируем объект который возвращает данный метод\r\n                                // из него мы снабжаем наш элемент нужными свойствами\r\n                                {...formik.getFieldProps('email')}\r\n                                />\r\n\r\n                            <TextField \r\n                                label='Password'\r\n                                margin='normal'\r\n                                type='password'\r\n                                {...formik.getFieldProps('password')}\r\n                                />\r\n\r\n                            <FormControlLabel \r\n                                label='Remember Me'\r\n                                control={<Checkbox name='rememberMe'/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                />\r\n\r\n                            <Button \r\n                                type='submit' \r\n                                variant='contained' \r\n                                color='primary'\r\n                                >\r\n                                Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport './App.css';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { AppBar, Button, CircularProgress, Container, Grid, IconButton, Toolbar, Typography } from '@material-ui/core';\r\nimport { updateTaskTC, createTaskTC, deleteTaskTC, ServerTasksType } from './bll/task-reducer/task-reducer';\r\nimport { addToDoListTC, changeTodoListFilterAC, changeTodoListTitleTC, fetchToDoListThunkTC, removeToDoListTC } from './bll/todolist-reducer/todolist-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './bll/state/store';\r\nimport { useCallback, useEffect } from 'react'; \r\nimport LinearProgress  from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport ErrorSnackbar from './components/ErrorSnackbar';\r\nimport { isMeOnServerInitializedTC, Status } from './bll/app-reducer/app-reducer';\r\nimport {Route} from 'react-router-dom';\r\nimport MainField from './components/MainField';\r\nimport LoginForm from './components/LoginForm';\r\nimport { logOutTC } from './bll/auth-reducer/auth-reducer';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\n// type ResponceType = {\r\n//     data: {},\r\n//     messages: string[],\r\n//     fieldsErrors: [],\r\n//     resultCode: number,\r\n// };\r\n\r\nexport type ServerListType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string | null,\r\n    order: number,\r\n    entityStatus?: Status,\r\n};\r\n\r\nexport type ListsType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string | null,\r\n    order: number,\r\n    filter: FilterValuesType,\r\n    entityStatus: Status,\r\n};\r\n\r\nexport type TasksType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n};\r\n\r\nexport type TasksObjPropsType = {\r\n    [key: string]: Array<ServerTasksType>,\r\n};\r\n\r\ntype AppType = {\r\n    setToDoListThunkAC: () => void,\r\n};\r\n\r\ntype AppPropsType = {\r\n    //поле демо нужно чтобы при тестировании\r\n    //через сторибук не обращатся к серваку а \r\n    //юзать наши подготовленные данные\r\n    demo?: boolean,\r\n};\r\n\r\nexport type MainFieldPropsType = {\r\n    tasksObj: TasksObjPropsType,\r\n    toDoListArr: ListsType[],\r\n    demo: boolean,\r\n    removeTask: (id: string, listId: string) => void,\r\n    addTask: (title: string, listId: string) => void,\r\n    changeStatus: (id: string, status: number, listId: string) => void,\r\n    setNewTaskTitle: (newValue: string, taskId: string, listId: string) => void,\r\n    filterTasks: (value: FilterValuesType, id: string) => void,\r\n    removeList: (listId: string) => void,\r\n    addToDoList: (title: string) =>  void,\r\n    addNewListHeader: (newValue: string, listId: string) => void,\r\n}\r\n\r\nfunction AppWithRedux({demo = false}: AppPropsType) {\r\n    //метод useState используется для перерисовки компонента\r\n    //он принимает стартовое/новое значения стейта и возвращает массив в котром хранится переменная с \r\n    //состоянием и функция которая будет запускать перерисовку и перерисовывает компонент\r\n\r\n    //но он толко принимает готовые состояния\r\n    //их преобразованием занимаются отдельные функции\r\n    //которые тоже лежат в компоненте и их может быть ооочень много и со сложной логикой\r\n\r\n    //чтобы вынести логику управления состоянием есть библиотеки на подобие redux\r\n    //но совремменный react уже тоже имеет подобный редаксу функционал\r\n\r\n    //у него паявился хук useReducer он принимает reducer и стартовое состояние\r\n    //и тоже возвращает массив с переменной нового состояния и функцию которая\r\n    //диспатчит action в reducer\r\n\r\n    //это позволяет вынести всю бизнес-логику из компоненты в bll\r\n\r\n        // const [tasksObj, dispatcToTaskReducer] = useReducer(taskReducer, {\r\n    //     [firstListId]: [\r\n    //         {id: v1(), title: 'HTML&CSS', isDone: true},\r\n    //         {id: v1(), title: 'JS', isDone: false},\r\n    //         {id: v1(), title: 'React', isDone: true},\r\n    //         {id: v1(), title: 'Hello world', isDone: false},\r\n    //         {id: v1(), title: 'I am happy', isDone: true},\r\n    //     ],\r\n    //     [secondListId]: [\r\n    //         {id: v1(), title: 'Suzuki GSX-R', isDone: true},\r\n    //         {id: v1(), title: 'New notebook', isDone: false},\r\n    //         {id: v1(), title: 'Something to eat', isDone: true},\r\n    //     ],\r\n    // });\r\n\r\n    // const [toDoListArr, dispatchToListsReducer] = useReducer(toDoListReducer, [\r\n    //     {id: firstListId, title: 'What to do', filter: 'active'},\r\n    //     {id: secondListId, title: 'What to buy', filter: 'all'},\r\n    // ]);\r\n\r\n    //если мы используем редакс то нам уже не нужны никакие хуки из реакта\r\n    //вместо них используются useSelector & useDispatch из реакт-редакс библиотеки\r\n    \r\n    //useSelector исполбзуется чтобы выбрать чтото из чегото\r\n    //в нвшем случае мы выбираем части сосотояния из стейта \r\n    //в типизации указывается в начале тип рут-стейта, а вторым аргументом тип \r\n    //интересующей нас подветки\r\n    const tasksObj = useSelector<AppRootStateType, TasksObjPropsType>(state => state.tasks);\r\n    const toDoListArr = useSelector<AppRootStateType, Array<ListsType>>(state => state.todolists);\r\n    const status = useSelector<AppRootStateType, Status>(state => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    // const isMeOnServerAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isMeOnServerAuth);\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth);\r\n\r\n    //вместо отдельных диспатчей редакс использует один общий\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isAuth){\r\n            return;\r\n        };\r\n        \r\n        dispatch(fetchToDoListThunkTC());\r\n    }, [isAuth]);\r\n\r\n    useEffect(() => {\r\n        dispatch(isMeOnServerInitializedTC())\r\n    }, []);\r\n\r\n    //после мемоизации дочепних комонент лишние перерисовки досих пор происходят\r\n    //по тому что при сравнинии пропсов получаеться что у нас в \r\n    //компоненту прилетают одинаковые колбеки\r\n    //но в js все функции это объекты а два хоть сколько похожих объекта не \r\n    //равны друг другу\r\n    //по этому контейнерная обертка реак мемо сравнивая входящие в пропсах колбеки \r\n    //постоянно получает новые хоть и одинаковые функции которые не равны \r\n    //и соответственно вызывает перерисовку\r\n\r\n    //чтобы это по фиксить в реасте имеется хук useCallback\r\n\r\n    //на вход он принимает собственно колбек первым аргументом и вторым массив зависимостей\r\n    //в итоге мы получаем закешированую функцию которая при повторном прокидывании\r\n    //через пропсы не создается заново а берется из кеша\r\n    //что блокирует лишние перерисовки\r\n\r\n    //в мссиве заувисимостей мы передаем то что может менятся в течении хода программы\r\n    //чтобы при изменениях в зависимостях реакт заново\r\n    //перекешировал эту функцию\r\n    const removeTask = useCallback((id: string, listId: string) => {\r\n        dispatch(deleteTaskTC(listId, id));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((title: string, listId: string) => {\r\n        dispatch(createTaskTC(listId, title))\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback((id: string, status: number, listId: string) => {\r\n        dispatch(updateTaskTC(listId, id, { status }));\r\n    }, [dispatch]);\r\n\r\n    const setNewTaskTitle = useCallback((newValue: string, taskId: string, listId: string) => {\r\n        dispatch(updateTaskTC(listId, taskId, { title: newValue }));\r\n    }, [dispatch]);\r\n\r\n\r\n    const filterTasks = useCallback((value: FilterValuesType, id: string) => {\r\n        const action = changeTodoListFilterAC({todoListId: id, filter: value});\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    \r\n    const removeList = useCallback((listId: string) => {    \r\n        dispatch(removeToDoListTC(listId));\r\n    }, [dispatch]);\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(addToDoListTC(title));\r\n    }, [dispatch]);\r\n\r\n    const addNewListHeader = useCallback((newValue: string, listId: string) => {\r\n        dispatch(changeTodoListTitleTC(listId, newValue));\r\n    }, [dispatch]);\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logOutTC());\r\n    }, []);\r\n    \r\n    if (!isInitialized){\r\n        return (\r\n            <Grid container justify='center'>\r\n                    <CircularProgress style={{marginTop: '320px'}}/>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <AppBar \r\n                position='fixed'>\r\n                    <Toolbar>\r\n                        <IconButton \r\n                                edge='start' \r\n                                color='inherit' \r\n                                aria-label='menu'><MenuIcon />\r\n                        </IconButton>\r\n\r\n                        <Typography \r\n                                variant='h6'>Todo Lists</Typography>\r\n\r\n                        {\r\n                            isAuth\r\n                                &&\r\n                                <Button \r\n                                        style={{marginLeft: 'auto'}}\r\n                                        color='inherit'\r\n                                        onClick={logoutHandler}\r\n                                        >\r\n                                        Log out</Button>\r\n                        }\r\n                    </Toolbar>\r\n\r\n                    {\r\n                        status === 'loading' && <LinearProgress />\r\n                    }\r\n            </AppBar>\r\n\r\n            <Container \r\n                    style={{\r\n                        marginTop: '100px',\r\n                    }}\r\n                    fixed>\r\n\r\n                <Route exact path='/' render={() => <MainField {...{\r\n                                                                        toDoListArr,\r\n                                                                        tasksObj, \r\n                                                                        demo,\r\n                                                                        addToDoList, \r\n                                                                        addTask, \r\n                                                                        removeTask, \r\n                                                                        filterTasks, \r\n                                                                        changeStatus, \r\n                                                                        removeList,\r\n                                                                        setNewTaskTitle,\r\n                                                                        addNewListHeader,\r\n                                                                    }}/>}\r\n                                                                    />\r\n\r\n                <Route path='/login' render={() => <LoginForm />}/>\r\n\r\n            </Container>\r\n\r\n            <ErrorSnackbar />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppWithRedux;","import { combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"../app-reducer/app-reducer\";\r\nimport authReducer from \"../auth-reducer/auth-reducer\";\r\nimport { taskReducer } from \"../task-reducer/task-reducer\";\r\nimport { toDoListReducer } from \"../todolist-reducer/todolist-reducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\n//создаем общий рутовый редюсер для редакс\r\n\r\n//он будет один для всех вызовов диспатча\r\n//и он будет нам возвращать новый стейт\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: toDoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n});\r\n\r\n//создаем новый стор на основе редюсеров\r\n//добавляем промежуточный слой для thunk\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//для использования redux toolkit нужно его подключить\r\n//он задает нам одинаковый стиль написания проектов\r\n//он берет на себя все подключения редюсерров\r\n//настройку типизации и прочее\r\n\r\n//это как бы надстройка обертка над стором редакса\r\n\r\n//для создания стора используется функция configureStore\r\n//и в нее передается объект с настройками: наши редюсеры, помежуточные слои прочее...\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n\r\n    //для типизации редюсера в настройку промижуточного слоя передается функция\r\n    //которая получить дефолтный промежуточный слой и добавляет в начало или конец наши собственные промежуточные слои\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n});\r\n\r\n//cздаем на  автоматически тип всего объекта состояня\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n//для работы со стором с консоли\r\n//создадим глобальную переменную с сылкой на стор\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './bll/state/store';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\n//basename используется для того чтобы пути к фпйлам сторились относительно\r\n//определенной переменной окружения и тогда на хосте при перезагрузке страницы\r\n//не на корневом урле у нас все будет нормально работать\r\nReactDOM.render(<Provider store={store}>\r\n                    <HashRouter basename={process.env.PUBLIC_URL}>\r\n                        <AppWithRedux />\r\n                    </HashRouter>\r\n                </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}